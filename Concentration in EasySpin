% Parameters common to all dopants
Exp.Range = [1300 1500]; % Magnetic field range in mT
Exp.mwFreq = 36.9; % Microwave frequency in GHz (X-band EPR)
Exp.Temperature = 4.5; % Temperature in Kelvin
Exp.Harmonic = 0; % Absorption spectrum
Exp.nPoints = 10000; % Number of points for the spectrum resolution

nSi = 0:5; % Number of 29Si nuclei to simulate

% Marker styles and colors for each dopant
markerStyles = {'o', 's', 'd', '^'}; % Circle, Square, Diamond, Triangle
colors = {'b', 'r', 'g', 'm'}; % Blue, Red, Green, Magenta

% Dopant data with hyperfine and quadrupole coupling
dopants = {
    struct('name', '31P', 'hyperfine', [117.53], 'quadrupole', 0), % No quadrupole for 31P (I = 1/2)
    struct('name', '209Bi', 'hyperfine', [1475], 'quadrupole', 0.50), % Quadrupole for 209Bi in MHz
    struct('name', '75As', 'hyperfine', [198.35], 'quadrupole', 0.15), % Quadrupole for 75As in MHz
    struct('name', '121Sb', 'hyperfine', [186.8], 'quadrupole', 0.25) % Quadrupole for 121Sb in MHz
};

% Initialize arrays to store peak areas for each dopant and number of 29Si nuclei
peakAreas = zeros(length(dopants), length(nSi));

% Loop over each dopant
for d = 1:length(dopants)
    dopant = dopants{d};
    fprintf('Simulating for %s\n', dopant.name);

    % Loop over different numbers of 29Si nuclei
    for n = nSi
        % Define the spin system
        Sys = struct();
        Sys.S = 1/2; % Electron spin
        Sys.g = 1.9985; % g-value for the dopant nucleus
        Sys.lwpp = 0.1; % Small broadening (peak-to-peak linewidth in mT)

        % Configure the system with dopant nucleus and 29Si nuclei
        if n == 0
            Sys.Nucs = dopant.name; % Only the dopant nucleus
            Sys.A = dopant.hyperfine; % Hyperfine coupling
        else
            Sys.Nucs = [sprintf('%s,', dopant.name), repmat('29Si,', 1, n)];
            Sys.Nucs = Sys.Nucs(1:end-1); % Remove trailing comma
            Sys.A = [dopant.hyperfine, repmat(4, 1, n)]; % Hyperfine coupling for 29Si
        end

        % Add quadrupole coupling if applicable
        if dopant.quadrupole > 0
            Sys.Q = [dopant.quadrupole, repmat(0, 1, n)];
        end

        % Simulate the EPR spectrum
        try
            [B, spc] = pepper(Sys, Exp); % Simulate using EasySpin

            if isempty(B) || isempty(spc)
                error('Pepper simulation failed for n = %d', n);
            end

            % Detect peaks manually (local maxima)
            peakThreshold = 0.05; % Minimum peak height
            peakLocations = [];
            peakValues = [];

            for i = 2:length(spc)-1
                if spc(i-1) < spc(i) && spc(i) > spc(i+1) && spc(i) > peakThreshold
                    peakLocations = [peakLocations, i]; % Store index of peak
                    peakValues = [peakValues, spc(i)]; % Store the peak value
                end
            end

            % Print detected peaks for the current dopant and nSi
            fprintf('Detected peaks for %s with n = %d Si nuclei:\n', dopant.name, n);
            for p = 1:length(peakLocations)
                fprintf('Peak at mT = %.4f, Value = %.4f\n', B(peakLocations(p)), peakValues(p));
            end

            % Compute total area under the curve
            totalArea = trapz(B, spc);
            fprintf('Total Area for %s with n = %d Si nuclei: %.2f\n\n', dopant.name, n, totalArea);

            % Store the total area
            peakAreas(d, n+1) = totalArea;

        catch ME
            % Handle errors gracefully
            fprintf('Error for %s with n=%d: %s\n', dopant.name, n, ME.message);
            peakAreas(d, n+1) = NaN;
        end
    end
end

% Plot total area under the spectrum vs number of 29Si nuclei
figure;
hold on;
for d = 1:length(dopants)
    % Plot the total area with different markers
    plot(nSi, peakAreas(d, :), markerStyles{d}, 'Color', colors{d}, ...
        'DisplayName', dopants{d}.name, 'MarkerSize', 8);

    % Polynomial fit
    p = polyfit(nSi, peakAreas(d, :), 5); % 5th-degree polynomial
    yfit = polyval(p, nSi); % Evaluate the polynomial fit

    % Plot fitted curve
    plot(nSi, yfit, 'Color', colors{d}, 'LineWidth', 1, 'LineStyle', '--', ...
        'DisplayName', [dopants{d}.name, ' Fit']);
end

% Add labels, title, and legend
legend({
    '31P', ...
    '31P Fit', ...
    '209Bi', ...
    '209Bi Fit', ...
    '75As', ...
    '75As Fit', ...
    '121Sb', ...
    '121Sb Fit'
}, 'FontSize', 10, 'Location', 'eastoutside');
legend('Location', 'eastoutside'); % Places the legend to the east outside the plot
%legend('Box', 'off'); % Optional: Remove the box around the legend

% Adjust position manually to make it more "middle east"
hLegend = legend;
legendPosition = get(hLegend, 'Position');
legendPosition(1) = legendPosition(1) - 0.05;
legendPosition(2) = 0.4; % Adjust vertical alignment (middle of the plot area)
set(hLegend, 'Position', legendPosition);
% Customize ticks on the axes
ax = gca; % Get the current axes
ax.Box = 'on';
ax.TickDir = 'in'; % Add ticks on both sides of the axes
ax.TickLength = [0.02, 0.02]; % Adjust the tick length
ax.XMinorTick = 'on'; % Enable minor ticks on the x-axis
ax.YMinorTick = 'on'; % Enable minor ticks on the y-axis
%ax.LineWidth = 0.75; % Increase the width of the axis lines
%title('Integration of EPR Spectrum vs Number of 29Si Nuclei', 'FontSize', 14, 'FontWeight', 'bold');
xlabel('Number of silicon-29 nuclei', 'FontSize', 12);
ylabel('Total Area [a.u.]', 'FontSize', 12);
%grid on;

% Enhance axis properties for publication
%set(gca, 'FontSize', 12, 'FontWeight', 'bold', 'LineWidth', 1.5, 'Box', 'on');

% Save the figure with high resolution
saveas(gcf, 'EPR_Spectrum_Area_vs_29Si.png');
exportgraphics(gcf, 'EPR_Spectrum_Area_vs_29Si.tiff', 'Resolution', 300);
